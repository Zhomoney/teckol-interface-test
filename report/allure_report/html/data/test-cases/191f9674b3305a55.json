{
  "uid" : "191f9674b3305a55",
  "name" : "查询单个私域创作者",
  "fullName" : "testcase#test_case_exec",
  "historyId" : "db2d410ff6ffc9a3b7130344882592ff",
  "time" : {
    "start" : 1676971779592,
    "stop" : 1676971780019,
    "duration" : 427
  },
  "status" : "broken",
  "statusMessage" : "TypeError: replace() argument 2 must be str, not None",
  "statusTrace" : "test_info = {'AssertResBody': 'res.code=200;res.data.id=sqlSearch(private_creator_base,[{create_person=${IPAdv_email}},{group_id=$...,{creator_link=${private_creatorLink}}])', 'AssertResCode': 200, 'AssertType': 'equal', 'VariableOperation': None, ...}\n\n    @pytest.mark.parametrize('test_info', testCaseList)\n    def test_case_exec(test_info):\n        allure.dynamic.title(test_info['name'])\n        allure.dynamic.description(test_info['remark'])\n    \n        if test_info['commonCaseId']:\n            login(test_info['commonCaseId'])\n        code, method, name = getCode(test_info['interfaceId'])\n        allure.dynamic.suite(code)\n>       body, code = getBody(test_info['reqBody'], code)\n\ntestcase.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon.py:286: in getBody\n    resBody = variableReplace(resBody)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'url': '${private_creatorLink}'}\n\n    def variableReplace(data):\n        '''\n        替换格式为 ${}的变量\n        :param data:(dict/str): 'fdoeriwuegjndsow${name}+++fdspwe'\n        :return:'fdoeriwuegjndsowNAME+++fdspwe'\n        '''\n        d = data\n        flagDict = False\n        if isinstance(data, dict):\n            flagDict = True\n            d = json.dumps(data)\n        varList = re.findall('\\${\\w*}', d)\n        for i in varList:\n            j = i[2: -1]\n            value = getVariable(j)\n>           d = d.replace(i, value)\nE           TypeError: replace() argument 2 must be str, not None\n\ncommon.py:314: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: replace() argument 2 must be str, not None",
    "statusTrace" : "test_info = {'AssertResBody': 'res.code=200;res.data.id=sqlSearch(private_creator_base,[{create_person=${IPAdv_email}},{group_id=$...,{creator_link=${private_creatorLink}}])', 'AssertResCode': 200, 'AssertType': 'equal', 'VariableOperation': None, ...}\n\n    @pytest.mark.parametrize('test_info', testCaseList)\n    def test_case_exec(test_info):\n        allure.dynamic.title(test_info['name'])\n        allure.dynamic.description(test_info['remark'])\n    \n        if test_info['commonCaseId']:\n            login(test_info['commonCaseId'])\n        code, method, name = getCode(test_info['interfaceId'])\n        allure.dynamic.suite(code)\n>       body, code = getBody(test_info['reqBody'], code)\n\ntestcase.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon.py:286: in getBody\n    resBody = variableReplace(resBody)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'url': '${private_creatorLink}'}\n\n    def variableReplace(data):\n        '''\n        替换格式为 ${}的变量\n        :param data:(dict/str): 'fdoeriwuegjndsow${name}+++fdspwe'\n        :return:'fdoeriwuegjndsowNAME+++fdspwe'\n        '''\n        d = data\n        flagDict = False\n        if isinstance(data, dict):\n            flagDict = True\n            d = json.dumps(data)\n        varList = re.findall('\\${\\w*}', d)\n        for i in varList:\n            j = i[2: -1]\n            value = getVariable(j)\n>           d = d.replace(i, value)\nE           TypeError: replace() argument 2 must be str, not None\n\ncommon.py:314: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "11d235a7d4ca300e",
      "name" : "stdout",
      "source" : "11d235a7d4ca300e.txt",
      "type" : "text/plain",
      "size" : 254
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "/creatorBase/Private/link"
  }, {
    "name" : "suite",
    "value" : "testcase"
  }, {
    "name" : "host",
    "value" : "SK-20220714XDVX"
  }, {
    "name" : "thread",
    "value" : "13476-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "test_info",
    "value" : "{'id': 31, 'name': '查询单个私域创作者', 'remark': None, 'VariableOperation': None, 'interfaceId': 78, 'commonCaseId': 1, 'reqHeader': {'authorization': 'Bearer ${token}', 'cpmsToken': '${cpmsToken}'}, 'reqBody': {'url': '${private_creatorLink}'}, 'AssertResCode': 200, 'AssertType': 'equal', 'AssertResBody': 'res.code=200;res.data.id=sqlSearch(private_creator_base,[{create_person=${IPAdv_email}},{group_id=${IPAdv_groupId}},{creator_link=${private_creatorLink}}])', 'setDown': None, 'successCount': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "191f9674b3305a55.json",
  "parameterValues" : [ "{'id': 31, 'name': '查询单个私域创作者', 'remark': None, 'VariableOperation': None, 'interfaceId': 78, 'commonCaseId': 1, 'reqHeader': {'authorization': 'Bearer ${token}', 'cpmsToken': '${cpmsToken}'}, 'reqBody': {'url': '${private_creatorLink}'}, 'AssertResCode': 200, 'AssertType': 'equal', 'AssertResBody': 'res.code=200;res.data.id=sqlSearch(private_creator_base,[{create_person=${IPAdv_email}},{group_id=${IPAdv_groupId}},{creator_link=${private_creatorLink}}])', 'setDown': None, 'successCount': None}" ]
}